// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Proxy.proto

#include "Proxy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR NetMsg::NetMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.newctlreq_)*/nullptr
  , /*decltype(_impl_.newctlrsp_)*/nullptr
  , /*decltype(_impl_.newtunnelreq_)*/nullptr
  , /*decltype(_impl_.newtunnelrsp_)*/nullptr
  , /*decltype(_impl_.freeproxyconn_)*/nullptr
  , /*decltype(_impl_.notifyclientcreateproxy_)*/nullptr
  , /*decltype(_impl_.notifyshutdownproxy_)*/nullptr
  , /*decltype(_impl_.claimproxyconn_)*/nullptr
  , /*decltype(_impl_.startproxyreq_)*/nullptr
  , /*decltype(_impl_.startproxyrsp_)*/nullptr
  , /*decltype(_impl_.messagetype_)*/0} {}
struct NetMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetMsgDefaultTypeInternal() {}
  union {
    NetMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetMsgDefaultTypeInternal _NetMsg_default_instance_;
PROTOBUF_CONSTEXPR NewCtlReqMsg::NewCtlReqMsg(
    ::_pbi::ConstantInitialized) {}
struct NewCtlReqMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewCtlReqMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewCtlReqMsgDefaultTypeInternal() {}
  union {
    NewCtlReqMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewCtlReqMsgDefaultTypeInternal _NewCtlReqMsg_default_instance_;
PROTOBUF_CONSTEXPR NewCtlRspMsg::NewCtlRspMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ctl_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NewCtlRspMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewCtlRspMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewCtlRspMsgDefaultTypeInternal() {}
  union {
    NewCtlRspMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewCtlRspMsgDefaultTypeInternal _NewCtlRspMsg_default_instance_;
PROTOBUF_CONSTEXPR NewTunnelReqMsg::NewTunnelReqMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.local_server_host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.local_server_port_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NewTunnelReqMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewTunnelReqMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewTunnelReqMsgDefaultTypeInternal() {}
  union {
    NewTunnelReqMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewTunnelReqMsgDefaultTypeInternal _NewTunnelReqMsg_default_instance_;
PROTOBUF_CONSTEXPR NewTunnelRspMsg::NewTunnelRspMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tun_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.local_server_host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.proxy_server_host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.local_server_port_)*/0
  , /*decltype(_impl_.proxy_server_port_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NewTunnelRspMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewTunnelRspMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewTunnelRspMsgDefaultTypeInternal() {}
  union {
    NewTunnelRspMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewTunnelRspMsgDefaultTypeInternal _NewTunnelRspMsg_default_instance_;
PROTOBUF_CONSTEXPR FreeProxyConnMsg::FreeProxyConnMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tun_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tconn_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FreeProxyConnMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FreeProxyConnMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FreeProxyConnMsgDefaultTypeInternal() {}
  union {
    FreeProxyConnMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FreeProxyConnMsgDefaultTypeInternal _FreeProxyConnMsg_default_instance_;
PROTOBUF_CONSTEXPR NotifyClientCreateProxyMsg::NotifyClientCreateProxyMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tun_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.server_proxy_port_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NotifyClientCreateProxyMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotifyClientCreateProxyMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotifyClientCreateProxyMsgDefaultTypeInternal() {}
  union {
    NotifyClientCreateProxyMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotifyClientCreateProxyMsgDefaultTypeInternal _NotifyClientCreateProxyMsg_default_instance_;
PROTOBUF_CONSTEXPR NotifyShutdownProxyMsg::NotifyShutdownProxyMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tun_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tconn_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tran_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NotifyShutdownProxyMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotifyShutdownProxyMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotifyShutdownProxyMsgDefaultTypeInternal() {}
  union {
    NotifyShutdownProxyMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotifyShutdownProxyMsgDefaultTypeInternal _NotifyShutdownProxyMsg_default_instance_;
PROTOBUF_CONSTEXPR ClaimProxyConnMsg::ClaimProxyConnMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ctl_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tun_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tconn_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClaimProxyConnMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClaimProxyConnMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClaimProxyConnMsgDefaultTypeInternal() {}
  union {
    ClaimProxyConnMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClaimProxyConnMsgDefaultTypeInternal _ClaimProxyConnMsg_default_instance_;
PROTOBUF_CONSTEXPR StartProxyReqMsg::StartProxyReqMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tconn_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.publicwaitconnid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StartProxyReqMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartProxyReqMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartProxyReqMsgDefaultTypeInternal() {}
  union {
    StartProxyReqMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartProxyReqMsgDefaultTypeInternal _StartProxyReqMsg_default_instance_;
PROTOBUF_CONSTEXPR StartProxyRspMsg::StartProxyRspMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.publicwaitconnid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StartProxyRspMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartProxyRspMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartProxyRspMsgDefaultTypeInternal() {}
  union {
    StartProxyRspMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartProxyRspMsgDefaultTypeInternal _StartProxyRspMsg_default_instance_;
static ::_pb::Metadata file_level_metadata_Proxy_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Proxy_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Proxy_2eproto = nullptr;

const uint32_t TableStruct_Proxy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::NetMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::NetMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NetMsg, _impl_.messagetype_),
  PROTOBUF_FIELD_OFFSET(::NetMsg, _impl_.newctlreq_),
  PROTOBUF_FIELD_OFFSET(::NetMsg, _impl_.newctlrsp_),
  PROTOBUF_FIELD_OFFSET(::NetMsg, _impl_.newtunnelreq_),
  PROTOBUF_FIELD_OFFSET(::NetMsg, _impl_.newtunnelrsp_),
  PROTOBUF_FIELD_OFFSET(::NetMsg, _impl_.freeproxyconn_),
  PROTOBUF_FIELD_OFFSET(::NetMsg, _impl_.notifyclientcreateproxy_),
  PROTOBUF_FIELD_OFFSET(::NetMsg, _impl_.notifyshutdownproxy_),
  PROTOBUF_FIELD_OFFSET(::NetMsg, _impl_.claimproxyconn_),
  PROTOBUF_FIELD_OFFSET(::NetMsg, _impl_.startproxyreq_),
  PROTOBUF_FIELD_OFFSET(::NetMsg, _impl_.startproxyrsp_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NewCtlReqMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NewCtlRspMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NewCtlRspMsg, _impl_.ctl_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NewTunnelReqMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NewTunnelReqMsg, _impl_.local_server_host_),
  PROTOBUF_FIELD_OFFSET(::NewTunnelReqMsg, _impl_.local_server_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NewTunnelRspMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NewTunnelRspMsg, _impl_.tun_id_),
  PROTOBUF_FIELD_OFFSET(::NewTunnelRspMsg, _impl_.local_server_host_),
  PROTOBUF_FIELD_OFFSET(::NewTunnelRspMsg, _impl_.local_server_port_),
  PROTOBUF_FIELD_OFFSET(::NewTunnelRspMsg, _impl_.proxy_server_host_),
  PROTOBUF_FIELD_OFFSET(::NewTunnelRspMsg, _impl_.proxy_server_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FreeProxyConnMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FreeProxyConnMsg, _impl_.tun_id_),
  PROTOBUF_FIELD_OFFSET(::FreeProxyConnMsg, _impl_.tconn_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NotifyClientCreateProxyMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NotifyClientCreateProxyMsg, _impl_.tun_id_),
  PROTOBUF_FIELD_OFFSET(::NotifyClientCreateProxyMsg, _impl_.server_proxy_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NotifyShutdownProxyMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NotifyShutdownProxyMsg, _impl_.tun_id_),
  PROTOBUF_FIELD_OFFSET(::NotifyShutdownProxyMsg, _impl_.tconn_id_),
  PROTOBUF_FIELD_OFFSET(::NotifyShutdownProxyMsg, _impl_.tran_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClaimProxyConnMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClaimProxyConnMsg, _impl_.ctl_id_),
  PROTOBUF_FIELD_OFFSET(::ClaimProxyConnMsg, _impl_.tun_id_),
  PROTOBUF_FIELD_OFFSET(::ClaimProxyConnMsg, _impl_.tconn_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StartProxyReqMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StartProxyReqMsg, _impl_.tconn_id_),
  PROTOBUF_FIELD_OFFSET(::StartProxyReqMsg, _impl_.publicwaitconnid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StartProxyRspMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StartProxyRspMsg, _impl_.publicwaitconnid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, -1, sizeof(::NetMsg)},
  { 28, -1, -1, sizeof(::NewCtlReqMsg)},
  { 34, -1, -1, sizeof(::NewCtlRspMsg)},
  { 41, -1, -1, sizeof(::NewTunnelReqMsg)},
  { 49, -1, -1, sizeof(::NewTunnelRspMsg)},
  { 60, -1, -1, sizeof(::FreeProxyConnMsg)},
  { 68, -1, -1, sizeof(::NotifyClientCreateProxyMsg)},
  { 76, -1, -1, sizeof(::NotifyShutdownProxyMsg)},
  { 85, -1, -1, sizeof(::ClaimProxyConnMsg)},
  { 94, -1, -1, sizeof(::StartProxyReqMsg)},
  { 102, -1, -1, sizeof(::StartProxyRspMsg)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_NetMsg_default_instance_._instance,
  &::_NewCtlReqMsg_default_instance_._instance,
  &::_NewCtlRspMsg_default_instance_._instance,
  &::_NewTunnelReqMsg_default_instance_._instance,
  &::_NewTunnelRspMsg_default_instance_._instance,
  &::_FreeProxyConnMsg_default_instance_._instance,
  &::_NotifyClientCreateProxyMsg_default_instance_._instance,
  &::_NotifyShutdownProxyMsg_default_instance_._instance,
  &::_ClaimProxyConnMsg_default_instance_._instance,
  &::_StartProxyReqMsg_default_instance_._instance,
  &::_StartProxyRspMsg_default_instance_._instance,
};

const char descriptor_table_protodef_Proxy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Proxy.proto\"\312\005\n\006NetMsg\022!\n\013messageType\030"
  "\001 \001(\0162\014.MessageType\022%\n\tnewCtlReq\030\002 \001(\0132\r"
  ".NewCtlReqMsgH\000\210\001\001\022%\n\tnewCtlRsp\030\003 \001(\0132\r."
  "NewCtlRspMsgH\001\210\001\001\022+\n\014newTunnelReq\030\004 \001(\0132"
  "\020.NewTunnelReqMsgH\002\210\001\001\022+\n\014newTunnelRsp\030\005"
  " \001(\0132\020.NewTunnelRspMsgH\003\210\001\001\022-\n\rfreeProxy"
  "Conn\030\006 \001(\0132\021.FreeProxyConnMsgH\004\210\001\001\022A\n\027no"
  "tifyClientCreateProxy\030\007 \001(\0132\033.NotifyClie"
  "ntCreateProxyMsgH\005\210\001\001\0229\n\023notifyShutdownP"
  "roxy\030\010 \001(\0132\027.NotifyShutdownProxyMsgH\006\210\001\001"
  "\022/\n\016claimProxyConn\030\t \001(\0132\022.ClaimProxyCon"
  "nMsgH\007\210\001\001\022-\n\rstartProxyReq\030\n \001(\0132\021.Start"
  "ProxyReqMsgH\010\210\001\001\022-\n\rstartProxyRsp\030\013 \001(\0132"
  "\021.StartProxyRspMsgH\t\210\001\001B\014\n\n_newCtlReqB\014\n"
  "\n_newCtlRspB\017\n\r_newTunnelReqB\017\n\r_newTunn"
  "elRspB\020\n\016_freeProxyConnB\032\n\030_notifyClient"
  "CreateProxyB\026\n\024_notifyShutdownProxyB\021\n\017_"
  "claimProxyConnB\020\n\016_startProxyReqB\020\n\016_sta"
  "rtProxyRsp\"\016\n\014NewCtlReqMsg\"\036\n\014NewCtlRspM"
  "sg\022\016\n\006ctl_id\030\001 \001(\t\"G\n\017NewTunnelReqMsg\022\031\n"
  "\021local_server_host\030\001 \001(\t\022\031\n\021local_server"
  "_port\030\002 \001(\005\"\215\001\n\017NewTunnelRspMsg\022\016\n\006tun_i"
  "d\030\001 \001(\t\022\031\n\021local_server_host\030\002 \001(\t\022\031\n\021lo"
  "cal_server_port\030\003 \001(\005\022\031\n\021proxy_server_ho"
  "st\030\004 \001(\t\022\031\n\021proxy_server_port\030\005 \001(\005\"4\n\020F"
  "reeProxyConnMsg\022\016\n\006tun_id\030\001 \001(\t\022\020\n\010TConn"
  "_id\030\002 \001(\t\"G\n\032NotifyClientCreateProxyMsg\022"
  "\016\n\006Tun_id\030\001 \001(\t\022\031\n\021server_proxy_port\030\002 \001"
  "(\005\"N\n\026NotifyShutdownProxyMsg\022\016\n\006Tun_id\030\001"
  " \001(\t\022\020\n\010TConn_id\030\002 \001(\t\022\022\n\ntran_count\030\003 \001"
  "(\005\"E\n\021ClaimProxyConnMsg\022\016\n\006ctl_id\030\001 \001(\t\022"
  "\016\n\006tun_id\030\002 \001(\t\022\020\n\010TConn_id\030\003 \001(\t\">\n\020Sta"
  "rtProxyReqMsg\022\020\n\010TConn_id\030\001 \001(\t\022\030\n\020Publi"
  "cWaitConnid\030\002 \001(\t\",\n\020StartProxyRspMsg\022\030\n"
  "\020PublicWaitConnid\030\001 \001(\t*\366\001\n\013MessageType\022"
  "\r\n\tNewCtlReq\020\000\022\r\n\tNewCtlRsp\020\001\022\020\n\014NewTunn"
  "elReq\020\002\022\020\n\014NewTunnelRsp\020\003\022\021\n\rFreeProxyCo"
  "nn\020\004\022\033\n\027NotifyClientCreateProxy\020\005\022\027\n\023Not"
  "ifyShutdownProxy\020\006\022\022\n\016ClaimProxyConn\020\007\022\021"
  "\n\rStartProxyReq\020\010\022\021\n\rStartProxyRsp\020\t\022\020\n\014"
  "HeartBeatReq\020\n\022\020\n\014HeartBeatRsp\020\013b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Proxy_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Proxy_2eproto = {
    false, false, 1640, descriptor_table_protodef_Proxy_2eproto,
    "Proxy.proto",
    &descriptor_table_Proxy_2eproto_once, nullptr, 0, 11,
    schemas, file_default_instances, TableStruct_Proxy_2eproto::offsets,
    file_level_metadata_Proxy_2eproto, file_level_enum_descriptors_Proxy_2eproto,
    file_level_service_descriptors_Proxy_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Proxy_2eproto_getter() {
  return &descriptor_table_Proxy_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Proxy_2eproto(&descriptor_table_Proxy_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Proxy_2eproto);
  return file_level_enum_descriptors_Proxy_2eproto[0];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class NetMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<NetMsg>()._impl_._has_bits_);
  static const ::NewCtlReqMsg& newctlreq(const NetMsg* msg);
  static void set_has_newctlreq(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::NewCtlRspMsg& newctlrsp(const NetMsg* msg);
  static void set_has_newctlrsp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::NewTunnelReqMsg& newtunnelreq(const NetMsg* msg);
  static void set_has_newtunnelreq(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::NewTunnelRspMsg& newtunnelrsp(const NetMsg* msg);
  static void set_has_newtunnelrsp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::FreeProxyConnMsg& freeproxyconn(const NetMsg* msg);
  static void set_has_freeproxyconn(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::NotifyClientCreateProxyMsg& notifyclientcreateproxy(const NetMsg* msg);
  static void set_has_notifyclientcreateproxy(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::NotifyShutdownProxyMsg& notifyshutdownproxy(const NetMsg* msg);
  static void set_has_notifyshutdownproxy(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::ClaimProxyConnMsg& claimproxyconn(const NetMsg* msg);
  static void set_has_claimproxyconn(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::StartProxyReqMsg& startproxyreq(const NetMsg* msg);
  static void set_has_startproxyreq(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::StartProxyRspMsg& startproxyrsp(const NetMsg* msg);
  static void set_has_startproxyrsp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::NewCtlReqMsg&
NetMsg::_Internal::newctlreq(const NetMsg* msg) {
  return *msg->_impl_.newctlreq_;
}
const ::NewCtlRspMsg&
NetMsg::_Internal::newctlrsp(const NetMsg* msg) {
  return *msg->_impl_.newctlrsp_;
}
const ::NewTunnelReqMsg&
NetMsg::_Internal::newtunnelreq(const NetMsg* msg) {
  return *msg->_impl_.newtunnelreq_;
}
const ::NewTunnelRspMsg&
NetMsg::_Internal::newtunnelrsp(const NetMsg* msg) {
  return *msg->_impl_.newtunnelrsp_;
}
const ::FreeProxyConnMsg&
NetMsg::_Internal::freeproxyconn(const NetMsg* msg) {
  return *msg->_impl_.freeproxyconn_;
}
const ::NotifyClientCreateProxyMsg&
NetMsg::_Internal::notifyclientcreateproxy(const NetMsg* msg) {
  return *msg->_impl_.notifyclientcreateproxy_;
}
const ::NotifyShutdownProxyMsg&
NetMsg::_Internal::notifyshutdownproxy(const NetMsg* msg) {
  return *msg->_impl_.notifyshutdownproxy_;
}
const ::ClaimProxyConnMsg&
NetMsg::_Internal::claimproxyconn(const NetMsg* msg) {
  return *msg->_impl_.claimproxyconn_;
}
const ::StartProxyReqMsg&
NetMsg::_Internal::startproxyreq(const NetMsg* msg) {
  return *msg->_impl_.startproxyreq_;
}
const ::StartProxyRspMsg&
NetMsg::_Internal::startproxyrsp(const NetMsg* msg) {
  return *msg->_impl_.startproxyrsp_;
}
NetMsg::NetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NetMsg)
}
NetMsg::NetMsg(const NetMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.newctlreq_){nullptr}
    , decltype(_impl_.newctlrsp_){nullptr}
    , decltype(_impl_.newtunnelreq_){nullptr}
    , decltype(_impl_.newtunnelrsp_){nullptr}
    , decltype(_impl_.freeproxyconn_){nullptr}
    , decltype(_impl_.notifyclientcreateproxy_){nullptr}
    , decltype(_impl_.notifyshutdownproxy_){nullptr}
    , decltype(_impl_.claimproxyconn_){nullptr}
    , decltype(_impl_.startproxyreq_){nullptr}
    , decltype(_impl_.startproxyrsp_){nullptr}
    , decltype(_impl_.messagetype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_newctlreq()) {
    _this->_impl_.newctlreq_ = new ::NewCtlReqMsg(*from._impl_.newctlreq_);
  }
  if (from._internal_has_newctlrsp()) {
    _this->_impl_.newctlrsp_ = new ::NewCtlRspMsg(*from._impl_.newctlrsp_);
  }
  if (from._internal_has_newtunnelreq()) {
    _this->_impl_.newtunnelreq_ = new ::NewTunnelReqMsg(*from._impl_.newtunnelreq_);
  }
  if (from._internal_has_newtunnelrsp()) {
    _this->_impl_.newtunnelrsp_ = new ::NewTunnelRspMsg(*from._impl_.newtunnelrsp_);
  }
  if (from._internal_has_freeproxyconn()) {
    _this->_impl_.freeproxyconn_ = new ::FreeProxyConnMsg(*from._impl_.freeproxyconn_);
  }
  if (from._internal_has_notifyclientcreateproxy()) {
    _this->_impl_.notifyclientcreateproxy_ = new ::NotifyClientCreateProxyMsg(*from._impl_.notifyclientcreateproxy_);
  }
  if (from._internal_has_notifyshutdownproxy()) {
    _this->_impl_.notifyshutdownproxy_ = new ::NotifyShutdownProxyMsg(*from._impl_.notifyshutdownproxy_);
  }
  if (from._internal_has_claimproxyconn()) {
    _this->_impl_.claimproxyconn_ = new ::ClaimProxyConnMsg(*from._impl_.claimproxyconn_);
  }
  if (from._internal_has_startproxyreq()) {
    _this->_impl_.startproxyreq_ = new ::StartProxyReqMsg(*from._impl_.startproxyreq_);
  }
  if (from._internal_has_startproxyrsp()) {
    _this->_impl_.startproxyrsp_ = new ::StartProxyRspMsg(*from._impl_.startproxyrsp_);
  }
  _this->_impl_.messagetype_ = from._impl_.messagetype_;
  // @@protoc_insertion_point(copy_constructor:NetMsg)
}

inline void NetMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.newctlreq_){nullptr}
    , decltype(_impl_.newctlrsp_){nullptr}
    , decltype(_impl_.newtunnelreq_){nullptr}
    , decltype(_impl_.newtunnelrsp_){nullptr}
    , decltype(_impl_.freeproxyconn_){nullptr}
    , decltype(_impl_.notifyclientcreateproxy_){nullptr}
    , decltype(_impl_.notifyshutdownproxy_){nullptr}
    , decltype(_impl_.claimproxyconn_){nullptr}
    , decltype(_impl_.startproxyreq_){nullptr}
    , decltype(_impl_.startproxyrsp_){nullptr}
    , decltype(_impl_.messagetype_){0}
  };
}

NetMsg::~NetMsg() {
  // @@protoc_insertion_point(destructor:NetMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.newctlreq_;
  if (this != internal_default_instance()) delete _impl_.newctlrsp_;
  if (this != internal_default_instance()) delete _impl_.newtunnelreq_;
  if (this != internal_default_instance()) delete _impl_.newtunnelrsp_;
  if (this != internal_default_instance()) delete _impl_.freeproxyconn_;
  if (this != internal_default_instance()) delete _impl_.notifyclientcreateproxy_;
  if (this != internal_default_instance()) delete _impl_.notifyshutdownproxy_;
  if (this != internal_default_instance()) delete _impl_.claimproxyconn_;
  if (this != internal_default_instance()) delete _impl_.startproxyreq_;
  if (this != internal_default_instance()) delete _impl_.startproxyrsp_;
}

void NetMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.newctlreq_ != nullptr);
      _impl_.newctlreq_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.newctlrsp_ != nullptr);
      _impl_.newctlrsp_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.newtunnelreq_ != nullptr);
      _impl_.newtunnelreq_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.newtunnelrsp_ != nullptr);
      _impl_.newtunnelrsp_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.freeproxyconn_ != nullptr);
      _impl_.freeproxyconn_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.notifyclientcreateproxy_ != nullptr);
      _impl_.notifyclientcreateproxy_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.notifyshutdownproxy_ != nullptr);
      _impl_.notifyshutdownproxy_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.claimproxyconn_ != nullptr);
      _impl_.claimproxyconn_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.startproxyreq_ != nullptr);
      _impl_.startproxyreq_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.startproxyrsp_ != nullptr);
      _impl_.startproxyrsp_->Clear();
    }
  }
  _impl_.messagetype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MessageType messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_messagetype(static_cast<::MessageType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .NewCtlReqMsg newCtlReq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_newctlreq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .NewCtlRspMsg newCtlRsp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_newctlrsp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .NewTunnelReqMsg newTunnelReq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_newtunnelreq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .NewTunnelRspMsg newTunnelRsp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_newtunnelrsp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .FreeProxyConnMsg freeProxyConn = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_freeproxyconn(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .NotifyClientCreateProxyMsg notifyClientCreateProxy = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_notifyclientcreateproxy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .NotifyShutdownProxyMsg notifyShutdownProxy = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_notifyshutdownproxy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ClaimProxyConnMsg claimProxyConn = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_claimproxyconn(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .StartProxyReqMsg startProxyReq = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_startproxyreq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .StartProxyRspMsg startProxyRsp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_startproxyrsp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .MessageType messageType = 1;
  if (this->_internal_messagetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  // optional .NewCtlReqMsg newCtlReq = 2;
  if (_internal_has_newctlreq()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::newctlreq(this),
        _Internal::newctlreq(this).GetCachedSize(), target, stream);
  }

  // optional .NewCtlRspMsg newCtlRsp = 3;
  if (_internal_has_newctlrsp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::newctlrsp(this),
        _Internal::newctlrsp(this).GetCachedSize(), target, stream);
  }

  // optional .NewTunnelReqMsg newTunnelReq = 4;
  if (_internal_has_newtunnelreq()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::newtunnelreq(this),
        _Internal::newtunnelreq(this).GetCachedSize(), target, stream);
  }

  // optional .NewTunnelRspMsg newTunnelRsp = 5;
  if (_internal_has_newtunnelrsp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::newtunnelrsp(this),
        _Internal::newtunnelrsp(this).GetCachedSize(), target, stream);
  }

  // optional .FreeProxyConnMsg freeProxyConn = 6;
  if (_internal_has_freeproxyconn()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::freeproxyconn(this),
        _Internal::freeproxyconn(this).GetCachedSize(), target, stream);
  }

  // optional .NotifyClientCreateProxyMsg notifyClientCreateProxy = 7;
  if (_internal_has_notifyclientcreateproxy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::notifyclientcreateproxy(this),
        _Internal::notifyclientcreateproxy(this).GetCachedSize(), target, stream);
  }

  // optional .NotifyShutdownProxyMsg notifyShutdownProxy = 8;
  if (_internal_has_notifyshutdownproxy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::notifyshutdownproxy(this),
        _Internal::notifyshutdownproxy(this).GetCachedSize(), target, stream);
  }

  // optional .ClaimProxyConnMsg claimProxyConn = 9;
  if (_internal_has_claimproxyconn()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::claimproxyconn(this),
        _Internal::claimproxyconn(this).GetCachedSize(), target, stream);
  }

  // optional .StartProxyReqMsg startProxyReq = 10;
  if (_internal_has_startproxyreq()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::startproxyreq(this),
        _Internal::startproxyreq(this).GetCachedSize(), target, stream);
  }

  // optional .StartProxyRspMsg startProxyRsp = 11;
  if (_internal_has_startproxyrsp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::startproxyrsp(this),
        _Internal::startproxyrsp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetMsg)
  return target;
}

size_t NetMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .NewCtlReqMsg newCtlReq = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.newctlreq_);
    }

    // optional .NewCtlRspMsg newCtlRsp = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.newctlrsp_);
    }

    // optional .NewTunnelReqMsg newTunnelReq = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.newtunnelreq_);
    }

    // optional .NewTunnelRspMsg newTunnelRsp = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.newtunnelrsp_);
    }

    // optional .FreeProxyConnMsg freeProxyConn = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.freeproxyconn_);
    }

    // optional .NotifyClientCreateProxyMsg notifyClientCreateProxy = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.notifyclientcreateproxy_);
    }

    // optional .NotifyShutdownProxyMsg notifyShutdownProxy = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.notifyshutdownproxy_);
    }

    // optional .ClaimProxyConnMsg claimProxyConn = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.claimproxyconn_);
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .StartProxyReqMsg startProxyReq = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.startproxyreq_);
    }

    // optional .StartProxyRspMsg startProxyRsp = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.startproxyrsp_);
    }

  }
  // .MessageType messageType = 1;
  if (this->_internal_messagetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_messagetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetMsg::GetClassData() const { return &_class_data_; }


void NetMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetMsg*>(&to_msg);
  auto& from = static_cast<const NetMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NetMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_newctlreq()->::NewCtlReqMsg::MergeFrom(
          from._internal_newctlreq());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_newctlrsp()->::NewCtlRspMsg::MergeFrom(
          from._internal_newctlrsp());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_newtunnelreq()->::NewTunnelReqMsg::MergeFrom(
          from._internal_newtunnelreq());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_newtunnelrsp()->::NewTunnelRspMsg::MergeFrom(
          from._internal_newtunnelrsp());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_freeproxyconn()->::FreeProxyConnMsg::MergeFrom(
          from._internal_freeproxyconn());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_notifyclientcreateproxy()->::NotifyClientCreateProxyMsg::MergeFrom(
          from._internal_notifyclientcreateproxy());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_notifyshutdownproxy()->::NotifyShutdownProxyMsg::MergeFrom(
          from._internal_notifyshutdownproxy());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_claimproxyconn()->::ClaimProxyConnMsg::MergeFrom(
          from._internal_claimproxyconn());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_startproxyreq()->::StartProxyReqMsg::MergeFrom(
          from._internal_startproxyreq());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_startproxyrsp()->::StartProxyRspMsg::MergeFrom(
          from._internal_startproxyrsp());
    }
  }
  if (from._internal_messagetype() != 0) {
    _this->_internal_set_messagetype(from._internal_messagetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetMsg::CopyFrom(const NetMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetMsg::IsInitialized() const {
  return true;
}

void NetMsg::InternalSwap(NetMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetMsg, _impl_.messagetype_)
      + sizeof(NetMsg::_impl_.messagetype_)
      - PROTOBUF_FIELD_OFFSET(NetMsg, _impl_.newctlreq_)>(
          reinterpret_cast<char*>(&_impl_.newctlreq_),
          reinterpret_cast<char*>(&other->_impl_.newctlreq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Proxy_2eproto_getter, &descriptor_table_Proxy_2eproto_once,
      file_level_metadata_Proxy_2eproto[0]);
}

// ===================================================================

class NewCtlReqMsg::_Internal {
 public:
};

NewCtlReqMsg::NewCtlReqMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:NewCtlReqMsg)
}
NewCtlReqMsg::NewCtlReqMsg(const NewCtlReqMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  NewCtlReqMsg* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NewCtlReqMsg)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewCtlReqMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewCtlReqMsg::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata NewCtlReqMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Proxy_2eproto_getter, &descriptor_table_Proxy_2eproto_once,
      file_level_metadata_Proxy_2eproto[1]);
}

// ===================================================================

class NewCtlRspMsg::_Internal {
 public:
};

NewCtlRspMsg::NewCtlRspMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NewCtlRspMsg)
}
NewCtlRspMsg::NewCtlRspMsg(const NewCtlRspMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NewCtlRspMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ctl_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ctl_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ctl_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ctl_id().empty()) {
    _this->_impl_.ctl_id_.Set(from._internal_ctl_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:NewCtlRspMsg)
}

inline void NewCtlRspMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ctl_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ctl_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ctl_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NewCtlRspMsg::~NewCtlRspMsg() {
  // @@protoc_insertion_point(destructor:NewCtlRspMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NewCtlRspMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ctl_id_.Destroy();
}

void NewCtlRspMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NewCtlRspMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:NewCtlRspMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ctl_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewCtlRspMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ctl_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ctl_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NewCtlRspMsg.ctl_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewCtlRspMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewCtlRspMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ctl_id = 1;
  if (!this->_internal_ctl_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ctl_id().data(), static_cast<int>(this->_internal_ctl_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NewCtlRspMsg.ctl_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ctl_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewCtlRspMsg)
  return target;
}

size_t NewCtlRspMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NewCtlRspMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ctl_id = 1;
  if (!this->_internal_ctl_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ctl_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewCtlRspMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NewCtlRspMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewCtlRspMsg::GetClassData() const { return &_class_data_; }


void NewCtlRspMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NewCtlRspMsg*>(&to_msg);
  auto& from = static_cast<const NewCtlRspMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NewCtlRspMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ctl_id().empty()) {
    _this->_internal_set_ctl_id(from._internal_ctl_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewCtlRspMsg::CopyFrom(const NewCtlRspMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NewCtlRspMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewCtlRspMsg::IsInitialized() const {
  return true;
}

void NewCtlRspMsg::InternalSwap(NewCtlRspMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ctl_id_, lhs_arena,
      &other->_impl_.ctl_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NewCtlRspMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Proxy_2eproto_getter, &descriptor_table_Proxy_2eproto_once,
      file_level_metadata_Proxy_2eproto[2]);
}

// ===================================================================

class NewTunnelReqMsg::_Internal {
 public:
};

NewTunnelReqMsg::NewTunnelReqMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NewTunnelReqMsg)
}
NewTunnelReqMsg::NewTunnelReqMsg(const NewTunnelReqMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NewTunnelReqMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.local_server_host_){}
    , decltype(_impl_.local_server_port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.local_server_host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_server_host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_local_server_host().empty()) {
    _this->_impl_.local_server_host_.Set(from._internal_local_server_host(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.local_server_port_ = from._impl_.local_server_port_;
  // @@protoc_insertion_point(copy_constructor:NewTunnelReqMsg)
}

inline void NewTunnelReqMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.local_server_host_){}
    , decltype(_impl_.local_server_port_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.local_server_host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_server_host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NewTunnelReqMsg::~NewTunnelReqMsg() {
  // @@protoc_insertion_point(destructor:NewTunnelReqMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NewTunnelReqMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.local_server_host_.Destroy();
}

void NewTunnelReqMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NewTunnelReqMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:NewTunnelReqMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.local_server_host_.ClearToEmpty();
  _impl_.local_server_port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewTunnelReqMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string local_server_host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_local_server_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NewTunnelReqMsg.local_server_host"));
        } else
          goto handle_unusual;
        continue;
      // int32 local_server_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.local_server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewTunnelReqMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewTunnelReqMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string local_server_host = 1;
  if (!this->_internal_local_server_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_server_host().data(), static_cast<int>(this->_internal_local_server_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NewTunnelReqMsg.local_server_host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_local_server_host(), target);
  }

  // int32 local_server_port = 2;
  if (this->_internal_local_server_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_local_server_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewTunnelReqMsg)
  return target;
}

size_t NewTunnelReqMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NewTunnelReqMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string local_server_host = 1;
  if (!this->_internal_local_server_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_server_host());
  }

  // int32 local_server_port = 2;
  if (this->_internal_local_server_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_local_server_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewTunnelReqMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NewTunnelReqMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewTunnelReqMsg::GetClassData() const { return &_class_data_; }


void NewTunnelReqMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NewTunnelReqMsg*>(&to_msg);
  auto& from = static_cast<const NewTunnelReqMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NewTunnelReqMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_local_server_host().empty()) {
    _this->_internal_set_local_server_host(from._internal_local_server_host());
  }
  if (from._internal_local_server_port() != 0) {
    _this->_internal_set_local_server_port(from._internal_local_server_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewTunnelReqMsg::CopyFrom(const NewTunnelReqMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NewTunnelReqMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewTunnelReqMsg::IsInitialized() const {
  return true;
}

void NewTunnelReqMsg::InternalSwap(NewTunnelReqMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.local_server_host_, lhs_arena,
      &other->_impl_.local_server_host_, rhs_arena
  );
  swap(_impl_.local_server_port_, other->_impl_.local_server_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewTunnelReqMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Proxy_2eproto_getter, &descriptor_table_Proxy_2eproto_once,
      file_level_metadata_Proxy_2eproto[3]);
}

// ===================================================================

class NewTunnelRspMsg::_Internal {
 public:
};

NewTunnelRspMsg::NewTunnelRspMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NewTunnelRspMsg)
}
NewTunnelRspMsg::NewTunnelRspMsg(const NewTunnelRspMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NewTunnelRspMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tun_id_){}
    , decltype(_impl_.local_server_host_){}
    , decltype(_impl_.proxy_server_host_){}
    , decltype(_impl_.local_server_port_){}
    , decltype(_impl_.proxy_server_port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tun_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tun_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tun_id().empty()) {
    _this->_impl_.tun_id_.Set(from._internal_tun_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.local_server_host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_server_host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_local_server_host().empty()) {
    _this->_impl_.local_server_host_.Set(from._internal_local_server_host(), 
      _this->GetArenaForAllocation());
  }
  _impl_.proxy_server_host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proxy_server_host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proxy_server_host().empty()) {
    _this->_impl_.proxy_server_host_.Set(from._internal_proxy_server_host(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.local_server_port_, &from._impl_.local_server_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.proxy_server_port_) -
    reinterpret_cast<char*>(&_impl_.local_server_port_)) + sizeof(_impl_.proxy_server_port_));
  // @@protoc_insertion_point(copy_constructor:NewTunnelRspMsg)
}

inline void NewTunnelRspMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tun_id_){}
    , decltype(_impl_.local_server_host_){}
    , decltype(_impl_.proxy_server_host_){}
    , decltype(_impl_.local_server_port_){0}
    , decltype(_impl_.proxy_server_port_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tun_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tun_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.local_server_host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_server_host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proxy_server_host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proxy_server_host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NewTunnelRspMsg::~NewTunnelRspMsg() {
  // @@protoc_insertion_point(destructor:NewTunnelRspMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NewTunnelRspMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tun_id_.Destroy();
  _impl_.local_server_host_.Destroy();
  _impl_.proxy_server_host_.Destroy();
}

void NewTunnelRspMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NewTunnelRspMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:NewTunnelRspMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tun_id_.ClearToEmpty();
  _impl_.local_server_host_.ClearToEmpty();
  _impl_.proxy_server_host_.ClearToEmpty();
  ::memset(&_impl_.local_server_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.proxy_server_port_) -
      reinterpret_cast<char*>(&_impl_.local_server_port_)) + sizeof(_impl_.proxy_server_port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewTunnelRspMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tun_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tun_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NewTunnelRspMsg.tun_id"));
        } else
          goto handle_unusual;
        continue;
      // string local_server_host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_local_server_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NewTunnelRspMsg.local_server_host"));
        } else
          goto handle_unusual;
        continue;
      // int32 local_server_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.local_server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string proxy_server_host = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_proxy_server_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NewTunnelRspMsg.proxy_server_host"));
        } else
          goto handle_unusual;
        continue;
      // int32 proxy_server_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.proxy_server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewTunnelRspMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewTunnelRspMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tun_id = 1;
  if (!this->_internal_tun_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tun_id().data(), static_cast<int>(this->_internal_tun_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NewTunnelRspMsg.tun_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tun_id(), target);
  }

  // string local_server_host = 2;
  if (!this->_internal_local_server_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_server_host().data(), static_cast<int>(this->_internal_local_server_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NewTunnelRspMsg.local_server_host");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_local_server_host(), target);
  }

  // int32 local_server_port = 3;
  if (this->_internal_local_server_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_local_server_port(), target);
  }

  // string proxy_server_host = 4;
  if (!this->_internal_proxy_server_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proxy_server_host().data(), static_cast<int>(this->_internal_proxy_server_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NewTunnelRspMsg.proxy_server_host");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_proxy_server_host(), target);
  }

  // int32 proxy_server_port = 5;
  if (this->_internal_proxy_server_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_proxy_server_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewTunnelRspMsg)
  return target;
}

size_t NewTunnelRspMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NewTunnelRspMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tun_id = 1;
  if (!this->_internal_tun_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tun_id());
  }

  // string local_server_host = 2;
  if (!this->_internal_local_server_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_server_host());
  }

  // string proxy_server_host = 4;
  if (!this->_internal_proxy_server_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proxy_server_host());
  }

  // int32 local_server_port = 3;
  if (this->_internal_local_server_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_local_server_port());
  }

  // int32 proxy_server_port = 5;
  if (this->_internal_proxy_server_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_proxy_server_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewTunnelRspMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NewTunnelRspMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewTunnelRspMsg::GetClassData() const { return &_class_data_; }


void NewTunnelRspMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NewTunnelRspMsg*>(&to_msg);
  auto& from = static_cast<const NewTunnelRspMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NewTunnelRspMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tun_id().empty()) {
    _this->_internal_set_tun_id(from._internal_tun_id());
  }
  if (!from._internal_local_server_host().empty()) {
    _this->_internal_set_local_server_host(from._internal_local_server_host());
  }
  if (!from._internal_proxy_server_host().empty()) {
    _this->_internal_set_proxy_server_host(from._internal_proxy_server_host());
  }
  if (from._internal_local_server_port() != 0) {
    _this->_internal_set_local_server_port(from._internal_local_server_port());
  }
  if (from._internal_proxy_server_port() != 0) {
    _this->_internal_set_proxy_server_port(from._internal_proxy_server_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewTunnelRspMsg::CopyFrom(const NewTunnelRspMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NewTunnelRspMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewTunnelRspMsg::IsInitialized() const {
  return true;
}

void NewTunnelRspMsg::InternalSwap(NewTunnelRspMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tun_id_, lhs_arena,
      &other->_impl_.tun_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.local_server_host_, lhs_arena,
      &other->_impl_.local_server_host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.proxy_server_host_, lhs_arena,
      &other->_impl_.proxy_server_host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewTunnelRspMsg, _impl_.proxy_server_port_)
      + sizeof(NewTunnelRspMsg::_impl_.proxy_server_port_)
      - PROTOBUF_FIELD_OFFSET(NewTunnelRspMsg, _impl_.local_server_port_)>(
          reinterpret_cast<char*>(&_impl_.local_server_port_),
          reinterpret_cast<char*>(&other->_impl_.local_server_port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewTunnelRspMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Proxy_2eproto_getter, &descriptor_table_Proxy_2eproto_once,
      file_level_metadata_Proxy_2eproto[4]);
}

// ===================================================================

class FreeProxyConnMsg::_Internal {
 public:
};

FreeProxyConnMsg::FreeProxyConnMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:FreeProxyConnMsg)
}
FreeProxyConnMsg::FreeProxyConnMsg(const FreeProxyConnMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FreeProxyConnMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tun_id_){}
    , decltype(_impl_.tconn_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tun_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tun_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tun_id().empty()) {
    _this->_impl_.tun_id_.Set(from._internal_tun_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tconn_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tconn_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tconn_id().empty()) {
    _this->_impl_.tconn_id_.Set(from._internal_tconn_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:FreeProxyConnMsg)
}

inline void FreeProxyConnMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tun_id_){}
    , decltype(_impl_.tconn_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tun_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tun_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tconn_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tconn_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FreeProxyConnMsg::~FreeProxyConnMsg() {
  // @@protoc_insertion_point(destructor:FreeProxyConnMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FreeProxyConnMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tun_id_.Destroy();
  _impl_.tconn_id_.Destroy();
}

void FreeProxyConnMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FreeProxyConnMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:FreeProxyConnMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tun_id_.ClearToEmpty();
  _impl_.tconn_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FreeProxyConnMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tun_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tun_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FreeProxyConnMsg.tun_id"));
        } else
          goto handle_unusual;
        continue;
      // string TConn_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tconn_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FreeProxyConnMsg.TConn_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FreeProxyConnMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FreeProxyConnMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tun_id = 1;
  if (!this->_internal_tun_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tun_id().data(), static_cast<int>(this->_internal_tun_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FreeProxyConnMsg.tun_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tun_id(), target);
  }

  // string TConn_id = 2;
  if (!this->_internal_tconn_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tconn_id().data(), static_cast<int>(this->_internal_tconn_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FreeProxyConnMsg.TConn_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tconn_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FreeProxyConnMsg)
  return target;
}

size_t FreeProxyConnMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FreeProxyConnMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tun_id = 1;
  if (!this->_internal_tun_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tun_id());
  }

  // string TConn_id = 2;
  if (!this->_internal_tconn_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tconn_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FreeProxyConnMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FreeProxyConnMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FreeProxyConnMsg::GetClassData() const { return &_class_data_; }


void FreeProxyConnMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FreeProxyConnMsg*>(&to_msg);
  auto& from = static_cast<const FreeProxyConnMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:FreeProxyConnMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tun_id().empty()) {
    _this->_internal_set_tun_id(from._internal_tun_id());
  }
  if (!from._internal_tconn_id().empty()) {
    _this->_internal_set_tconn_id(from._internal_tconn_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FreeProxyConnMsg::CopyFrom(const FreeProxyConnMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FreeProxyConnMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreeProxyConnMsg::IsInitialized() const {
  return true;
}

void FreeProxyConnMsg::InternalSwap(FreeProxyConnMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tun_id_, lhs_arena,
      &other->_impl_.tun_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tconn_id_, lhs_arena,
      &other->_impl_.tconn_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FreeProxyConnMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Proxy_2eproto_getter, &descriptor_table_Proxy_2eproto_once,
      file_level_metadata_Proxy_2eproto[5]);
}

// ===================================================================

class NotifyClientCreateProxyMsg::_Internal {
 public:
};

NotifyClientCreateProxyMsg::NotifyClientCreateProxyMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NotifyClientCreateProxyMsg)
}
NotifyClientCreateProxyMsg::NotifyClientCreateProxyMsg(const NotifyClientCreateProxyMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NotifyClientCreateProxyMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tun_id_){}
    , decltype(_impl_.server_proxy_port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tun_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tun_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tun_id().empty()) {
    _this->_impl_.tun_id_.Set(from._internal_tun_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.server_proxy_port_ = from._impl_.server_proxy_port_;
  // @@protoc_insertion_point(copy_constructor:NotifyClientCreateProxyMsg)
}

inline void NotifyClientCreateProxyMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tun_id_){}
    , decltype(_impl_.server_proxy_port_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tun_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tun_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NotifyClientCreateProxyMsg::~NotifyClientCreateProxyMsg() {
  // @@protoc_insertion_point(destructor:NotifyClientCreateProxyMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotifyClientCreateProxyMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tun_id_.Destroy();
}

void NotifyClientCreateProxyMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NotifyClientCreateProxyMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:NotifyClientCreateProxyMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tun_id_.ClearToEmpty();
  _impl_.server_proxy_port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotifyClientCreateProxyMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Tun_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tun_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NotifyClientCreateProxyMsg.Tun_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 server_proxy_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.server_proxy_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotifyClientCreateProxyMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NotifyClientCreateProxyMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Tun_id = 1;
  if (!this->_internal_tun_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tun_id().data(), static_cast<int>(this->_internal_tun_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NotifyClientCreateProxyMsg.Tun_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tun_id(), target);
  }

  // int32 server_proxy_port = 2;
  if (this->_internal_server_proxy_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_server_proxy_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NotifyClientCreateProxyMsg)
  return target;
}

size_t NotifyClientCreateProxyMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NotifyClientCreateProxyMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Tun_id = 1;
  if (!this->_internal_tun_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tun_id());
  }

  // int32 server_proxy_port = 2;
  if (this->_internal_server_proxy_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_server_proxy_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotifyClientCreateProxyMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NotifyClientCreateProxyMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotifyClientCreateProxyMsg::GetClassData() const { return &_class_data_; }


void NotifyClientCreateProxyMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NotifyClientCreateProxyMsg*>(&to_msg);
  auto& from = static_cast<const NotifyClientCreateProxyMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NotifyClientCreateProxyMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tun_id().empty()) {
    _this->_internal_set_tun_id(from._internal_tun_id());
  }
  if (from._internal_server_proxy_port() != 0) {
    _this->_internal_set_server_proxy_port(from._internal_server_proxy_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotifyClientCreateProxyMsg::CopyFrom(const NotifyClientCreateProxyMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NotifyClientCreateProxyMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyClientCreateProxyMsg::IsInitialized() const {
  return true;
}

void NotifyClientCreateProxyMsg::InternalSwap(NotifyClientCreateProxyMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tun_id_, lhs_arena,
      &other->_impl_.tun_id_, rhs_arena
  );
  swap(_impl_.server_proxy_port_, other->_impl_.server_proxy_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifyClientCreateProxyMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Proxy_2eproto_getter, &descriptor_table_Proxy_2eproto_once,
      file_level_metadata_Proxy_2eproto[6]);
}

// ===================================================================

class NotifyShutdownProxyMsg::_Internal {
 public:
};

NotifyShutdownProxyMsg::NotifyShutdownProxyMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NotifyShutdownProxyMsg)
}
NotifyShutdownProxyMsg::NotifyShutdownProxyMsg(const NotifyShutdownProxyMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NotifyShutdownProxyMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tun_id_){}
    , decltype(_impl_.tconn_id_){}
    , decltype(_impl_.tran_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tun_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tun_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tun_id().empty()) {
    _this->_impl_.tun_id_.Set(from._internal_tun_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tconn_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tconn_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tconn_id().empty()) {
    _this->_impl_.tconn_id_.Set(from._internal_tconn_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.tran_count_ = from._impl_.tran_count_;
  // @@protoc_insertion_point(copy_constructor:NotifyShutdownProxyMsg)
}

inline void NotifyShutdownProxyMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tun_id_){}
    , decltype(_impl_.tconn_id_){}
    , decltype(_impl_.tran_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tun_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tun_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tconn_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tconn_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NotifyShutdownProxyMsg::~NotifyShutdownProxyMsg() {
  // @@protoc_insertion_point(destructor:NotifyShutdownProxyMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotifyShutdownProxyMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tun_id_.Destroy();
  _impl_.tconn_id_.Destroy();
}

void NotifyShutdownProxyMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NotifyShutdownProxyMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:NotifyShutdownProxyMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tun_id_.ClearToEmpty();
  _impl_.tconn_id_.ClearToEmpty();
  _impl_.tran_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotifyShutdownProxyMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Tun_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tun_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NotifyShutdownProxyMsg.Tun_id"));
        } else
          goto handle_unusual;
        continue;
      // string TConn_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tconn_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NotifyShutdownProxyMsg.TConn_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 tran_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.tran_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotifyShutdownProxyMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NotifyShutdownProxyMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Tun_id = 1;
  if (!this->_internal_tun_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tun_id().data(), static_cast<int>(this->_internal_tun_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NotifyShutdownProxyMsg.Tun_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tun_id(), target);
  }

  // string TConn_id = 2;
  if (!this->_internal_tconn_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tconn_id().data(), static_cast<int>(this->_internal_tconn_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NotifyShutdownProxyMsg.TConn_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tconn_id(), target);
  }

  // int32 tran_count = 3;
  if (this->_internal_tran_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_tran_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NotifyShutdownProxyMsg)
  return target;
}

size_t NotifyShutdownProxyMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NotifyShutdownProxyMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Tun_id = 1;
  if (!this->_internal_tun_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tun_id());
  }

  // string TConn_id = 2;
  if (!this->_internal_tconn_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tconn_id());
  }

  // int32 tran_count = 3;
  if (this->_internal_tran_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tran_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotifyShutdownProxyMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NotifyShutdownProxyMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotifyShutdownProxyMsg::GetClassData() const { return &_class_data_; }


void NotifyShutdownProxyMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NotifyShutdownProxyMsg*>(&to_msg);
  auto& from = static_cast<const NotifyShutdownProxyMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NotifyShutdownProxyMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tun_id().empty()) {
    _this->_internal_set_tun_id(from._internal_tun_id());
  }
  if (!from._internal_tconn_id().empty()) {
    _this->_internal_set_tconn_id(from._internal_tconn_id());
  }
  if (from._internal_tran_count() != 0) {
    _this->_internal_set_tran_count(from._internal_tran_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotifyShutdownProxyMsg::CopyFrom(const NotifyShutdownProxyMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NotifyShutdownProxyMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyShutdownProxyMsg::IsInitialized() const {
  return true;
}

void NotifyShutdownProxyMsg::InternalSwap(NotifyShutdownProxyMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tun_id_, lhs_arena,
      &other->_impl_.tun_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tconn_id_, lhs_arena,
      &other->_impl_.tconn_id_, rhs_arena
  );
  swap(_impl_.tran_count_, other->_impl_.tran_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifyShutdownProxyMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Proxy_2eproto_getter, &descriptor_table_Proxy_2eproto_once,
      file_level_metadata_Proxy_2eproto[7]);
}

// ===================================================================

class ClaimProxyConnMsg::_Internal {
 public:
};

ClaimProxyConnMsg::ClaimProxyConnMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ClaimProxyConnMsg)
}
ClaimProxyConnMsg::ClaimProxyConnMsg(const ClaimProxyConnMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClaimProxyConnMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ctl_id_){}
    , decltype(_impl_.tun_id_){}
    , decltype(_impl_.tconn_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ctl_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ctl_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ctl_id().empty()) {
    _this->_impl_.ctl_id_.Set(from._internal_ctl_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tun_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tun_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tun_id().empty()) {
    _this->_impl_.tun_id_.Set(from._internal_tun_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tconn_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tconn_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tconn_id().empty()) {
    _this->_impl_.tconn_id_.Set(from._internal_tconn_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ClaimProxyConnMsg)
}

inline void ClaimProxyConnMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ctl_id_){}
    , decltype(_impl_.tun_id_){}
    , decltype(_impl_.tconn_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ctl_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ctl_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tun_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tun_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tconn_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tconn_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClaimProxyConnMsg::~ClaimProxyConnMsg() {
  // @@protoc_insertion_point(destructor:ClaimProxyConnMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClaimProxyConnMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ctl_id_.Destroy();
  _impl_.tun_id_.Destroy();
  _impl_.tconn_id_.Destroy();
}

void ClaimProxyConnMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClaimProxyConnMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ClaimProxyConnMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ctl_id_.ClearToEmpty();
  _impl_.tun_id_.ClearToEmpty();
  _impl_.tconn_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClaimProxyConnMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ctl_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ctl_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ClaimProxyConnMsg.ctl_id"));
        } else
          goto handle_unusual;
        continue;
      // string tun_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tun_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ClaimProxyConnMsg.tun_id"));
        } else
          goto handle_unusual;
        continue;
      // string TConn_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tconn_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ClaimProxyConnMsg.TConn_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClaimProxyConnMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClaimProxyConnMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ctl_id = 1;
  if (!this->_internal_ctl_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ctl_id().data(), static_cast<int>(this->_internal_ctl_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClaimProxyConnMsg.ctl_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ctl_id(), target);
  }

  // string tun_id = 2;
  if (!this->_internal_tun_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tun_id().data(), static_cast<int>(this->_internal_tun_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClaimProxyConnMsg.tun_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tun_id(), target);
  }

  // string TConn_id = 3;
  if (!this->_internal_tconn_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tconn_id().data(), static_cast<int>(this->_internal_tconn_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClaimProxyConnMsg.TConn_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tconn_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClaimProxyConnMsg)
  return target;
}

size_t ClaimProxyConnMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClaimProxyConnMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ctl_id = 1;
  if (!this->_internal_ctl_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ctl_id());
  }

  // string tun_id = 2;
  if (!this->_internal_tun_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tun_id());
  }

  // string TConn_id = 3;
  if (!this->_internal_tconn_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tconn_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClaimProxyConnMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClaimProxyConnMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClaimProxyConnMsg::GetClassData() const { return &_class_data_; }


void ClaimProxyConnMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClaimProxyConnMsg*>(&to_msg);
  auto& from = static_cast<const ClaimProxyConnMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ClaimProxyConnMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ctl_id().empty()) {
    _this->_internal_set_ctl_id(from._internal_ctl_id());
  }
  if (!from._internal_tun_id().empty()) {
    _this->_internal_set_tun_id(from._internal_tun_id());
  }
  if (!from._internal_tconn_id().empty()) {
    _this->_internal_set_tconn_id(from._internal_tconn_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClaimProxyConnMsg::CopyFrom(const ClaimProxyConnMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClaimProxyConnMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClaimProxyConnMsg::IsInitialized() const {
  return true;
}

void ClaimProxyConnMsg::InternalSwap(ClaimProxyConnMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ctl_id_, lhs_arena,
      &other->_impl_.ctl_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tun_id_, lhs_arena,
      &other->_impl_.tun_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tconn_id_, lhs_arena,
      &other->_impl_.tconn_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ClaimProxyConnMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Proxy_2eproto_getter, &descriptor_table_Proxy_2eproto_once,
      file_level_metadata_Proxy_2eproto[8]);
}

// ===================================================================

class StartProxyReqMsg::_Internal {
 public:
};

StartProxyReqMsg::StartProxyReqMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StartProxyReqMsg)
}
StartProxyReqMsg::StartProxyReqMsg(const StartProxyReqMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StartProxyReqMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tconn_id_){}
    , decltype(_impl_.publicwaitconnid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tconn_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tconn_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tconn_id().empty()) {
    _this->_impl_.tconn_id_.Set(from._internal_tconn_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.publicwaitconnid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publicwaitconnid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_publicwaitconnid().empty()) {
    _this->_impl_.publicwaitconnid_.Set(from._internal_publicwaitconnid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:StartProxyReqMsg)
}

inline void StartProxyReqMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tconn_id_){}
    , decltype(_impl_.publicwaitconnid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tconn_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tconn_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.publicwaitconnid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publicwaitconnid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StartProxyReqMsg::~StartProxyReqMsg() {
  // @@protoc_insertion_point(destructor:StartProxyReqMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartProxyReqMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tconn_id_.Destroy();
  _impl_.publicwaitconnid_.Destroy();
}

void StartProxyReqMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartProxyReqMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:StartProxyReqMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tconn_id_.ClearToEmpty();
  _impl_.publicwaitconnid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartProxyReqMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string TConn_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tconn_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "StartProxyReqMsg.TConn_id"));
        } else
          goto handle_unusual;
        continue;
      // string PublicWaitConnid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_publicwaitconnid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "StartProxyReqMsg.PublicWaitConnid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartProxyReqMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StartProxyReqMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string TConn_id = 1;
  if (!this->_internal_tconn_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tconn_id().data(), static_cast<int>(this->_internal_tconn_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StartProxyReqMsg.TConn_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tconn_id(), target);
  }

  // string PublicWaitConnid = 2;
  if (!this->_internal_publicwaitconnid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_publicwaitconnid().data(), static_cast<int>(this->_internal_publicwaitconnid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StartProxyReqMsg.PublicWaitConnid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_publicwaitconnid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StartProxyReqMsg)
  return target;
}

size_t StartProxyReqMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StartProxyReqMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string TConn_id = 1;
  if (!this->_internal_tconn_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tconn_id());
  }

  // string PublicWaitConnid = 2;
  if (!this->_internal_publicwaitconnid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_publicwaitconnid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartProxyReqMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StartProxyReqMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartProxyReqMsg::GetClassData() const { return &_class_data_; }


void StartProxyReqMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StartProxyReqMsg*>(&to_msg);
  auto& from = static_cast<const StartProxyReqMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StartProxyReqMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tconn_id().empty()) {
    _this->_internal_set_tconn_id(from._internal_tconn_id());
  }
  if (!from._internal_publicwaitconnid().empty()) {
    _this->_internal_set_publicwaitconnid(from._internal_publicwaitconnid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartProxyReqMsg::CopyFrom(const StartProxyReqMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartProxyReqMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartProxyReqMsg::IsInitialized() const {
  return true;
}

void StartProxyReqMsg::InternalSwap(StartProxyReqMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tconn_id_, lhs_arena,
      &other->_impl_.tconn_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.publicwaitconnid_, lhs_arena,
      &other->_impl_.publicwaitconnid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StartProxyReqMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Proxy_2eproto_getter, &descriptor_table_Proxy_2eproto_once,
      file_level_metadata_Proxy_2eproto[9]);
}

// ===================================================================

class StartProxyRspMsg::_Internal {
 public:
};

StartProxyRspMsg::StartProxyRspMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StartProxyRspMsg)
}
StartProxyRspMsg::StartProxyRspMsg(const StartProxyRspMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StartProxyRspMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.publicwaitconnid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.publicwaitconnid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publicwaitconnid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_publicwaitconnid().empty()) {
    _this->_impl_.publicwaitconnid_.Set(from._internal_publicwaitconnid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:StartProxyRspMsg)
}

inline void StartProxyRspMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.publicwaitconnid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.publicwaitconnid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publicwaitconnid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StartProxyRspMsg::~StartProxyRspMsg() {
  // @@protoc_insertion_point(destructor:StartProxyRspMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartProxyRspMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.publicwaitconnid_.Destroy();
}

void StartProxyRspMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartProxyRspMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:StartProxyRspMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.publicwaitconnid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartProxyRspMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string PublicWaitConnid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_publicwaitconnid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "StartProxyRspMsg.PublicWaitConnid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartProxyRspMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StartProxyRspMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string PublicWaitConnid = 1;
  if (!this->_internal_publicwaitconnid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_publicwaitconnid().data(), static_cast<int>(this->_internal_publicwaitconnid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StartProxyRspMsg.PublicWaitConnid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_publicwaitconnid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StartProxyRspMsg)
  return target;
}

size_t StartProxyRspMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StartProxyRspMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string PublicWaitConnid = 1;
  if (!this->_internal_publicwaitconnid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_publicwaitconnid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartProxyRspMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StartProxyRspMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartProxyRspMsg::GetClassData() const { return &_class_data_; }


void StartProxyRspMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StartProxyRspMsg*>(&to_msg);
  auto& from = static_cast<const StartProxyRspMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StartProxyRspMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_publicwaitconnid().empty()) {
    _this->_internal_set_publicwaitconnid(from._internal_publicwaitconnid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartProxyRspMsg::CopyFrom(const StartProxyRspMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartProxyRspMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartProxyRspMsg::IsInitialized() const {
  return true;
}

void StartProxyRspMsg::InternalSwap(StartProxyRspMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.publicwaitconnid_, lhs_arena,
      &other->_impl_.publicwaitconnid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StartProxyRspMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Proxy_2eproto_getter, &descriptor_table_Proxy_2eproto_once,
      file_level_metadata_Proxy_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NetMsg*
Arena::CreateMaybeMessage< ::NetMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NetMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::NewCtlReqMsg*
Arena::CreateMaybeMessage< ::NewCtlReqMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NewCtlReqMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::NewCtlRspMsg*
Arena::CreateMaybeMessage< ::NewCtlRspMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NewCtlRspMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::NewTunnelReqMsg*
Arena::CreateMaybeMessage< ::NewTunnelReqMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NewTunnelReqMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::NewTunnelRspMsg*
Arena::CreateMaybeMessage< ::NewTunnelRspMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NewTunnelRspMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::FreeProxyConnMsg*
Arena::CreateMaybeMessage< ::FreeProxyConnMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FreeProxyConnMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::NotifyClientCreateProxyMsg*
Arena::CreateMaybeMessage< ::NotifyClientCreateProxyMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NotifyClientCreateProxyMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::NotifyShutdownProxyMsg*
Arena::CreateMaybeMessage< ::NotifyShutdownProxyMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NotifyShutdownProxyMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::ClaimProxyConnMsg*
Arena::CreateMaybeMessage< ::ClaimProxyConnMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClaimProxyConnMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::StartProxyReqMsg*
Arena::CreateMaybeMessage< ::StartProxyReqMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StartProxyReqMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::StartProxyRspMsg*
Arena::CreateMaybeMessage< ::StartProxyRspMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StartProxyRspMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
